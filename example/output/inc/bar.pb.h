// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bar_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bar_2eproto;
namespace bar {
class MyMessage;
class MyMessageDefaultTypeInternal;
extern MyMessageDefaultTypeInternal _MyMessage_default_instance_;
class MyMessage_MpEntry_DoNotUse;
class MyMessage_MpEntry_DoNotUseDefaultTypeInternal;
extern MyMessage_MpEntry_DoNotUseDefaultTypeInternal _MyMessage_MpEntry_DoNotUse_default_instance_;
class MySmallMessage;
class MySmallMessageDefaultTypeInternal;
extern MySmallMessageDefaultTypeInternal _MySmallMessage_default_instance_;
}  // namespace bar
PROTOBUF_NAMESPACE_OPEN
template<> ::bar::MyMessage* Arena::CreateMaybeMessage<::bar::MyMessage>(Arena*);
template<> ::bar::MyMessage_MpEntry_DoNotUse* Arena::CreateMaybeMessage<::bar::MyMessage_MpEntry_DoNotUse>(Arena*);
template<> ::bar::MySmallMessage* Arena::CreateMaybeMessage<::bar::MySmallMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bar {

// ===================================================================

class MySmallMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bar.MySmallMessage) */ {
 public:
  inline MySmallMessage() : MySmallMessage(nullptr) {};
  virtual ~MySmallMessage();

  MySmallMessage(const MySmallMessage& from);
  MySmallMessage(MySmallMessage&& from) noexcept
    : MySmallMessage() {
    *this = ::std::move(from);
  }

  inline MySmallMessage& operator=(const MySmallMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MySmallMessage& operator=(MySmallMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MySmallMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MySmallMessage* internal_default_instance() {
    return reinterpret_cast<const MySmallMessage*>(
               &_MySmallMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MySmallMessage& a, MySmallMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MySmallMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MySmallMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MySmallMessage* New() const final {
    return CreateMaybeMessage<MySmallMessage>(nullptr);
  }

  MySmallMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MySmallMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MySmallMessage& from);
  void MergeFrom(const MySmallMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MySmallMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bar.MySmallMessage";
  }
  protected:
  explicit MySmallMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bar_2eproto);
    return ::descriptor_table_bar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // int64 val = 1;
  void clear_val();
  ::PROTOBUF_NAMESPACE_ID::int64 val() const;
  void set_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_val() const;
  void _internal_set_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bar.MySmallMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bar_2eproto;
};
// -------------------------------------------------------------------

class MyMessage_MpEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MyMessage_MpEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MyMessage_MpEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  MyMessage_MpEntry_DoNotUse();
  MyMessage_MpEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MyMessage_MpEntry_DoNotUse& other);
  static const MyMessage_MpEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MyMessage_MpEntry_DoNotUse*>(&_MyMessage_MpEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "bar.MyMessage.MpEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bar_2eproto);
    return ::descriptor_table_bar_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class MyMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bar.MyMessage) */ {
 public:
  inline MyMessage() : MyMessage(nullptr) {};
  virtual ~MyMessage();

  MyMessage(const MyMessage& from);
  MyMessage(MyMessage&& from) noexcept
    : MyMessage() {
    *this = ::std::move(from);
  }

  inline MyMessage& operator=(const MyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyMessage& operator=(MyMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MyMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MyMessage* internal_default_instance() {
    return reinterpret_cast<const MyMessage*>(
               &_MyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MyMessage& a, MyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MyMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MyMessage* New() const final {
    return CreateMaybeMessage<MyMessage>(nullptr);
  }

  MyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MyMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MyMessage& from);
  void MergeFrom(const MyMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bar.MyMessage";
  }
  protected:
  explicit MyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bar_2eproto);
    return ::descriptor_table_bar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kVecFieldNumber = 3,
    kMpFieldNumber = 4,
    kStrFieldNumber = 2,
    kValFieldNumber = 1,
  };
  // repeated .bar.MySmallMessage vec = 3;
  int vec_size() const;
  private:
  int _internal_vec_size() const;
  public:
  void clear_vec();
  ::bar::MySmallMessage* mutable_vec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bar::MySmallMessage >*
      mutable_vec();
  private:
  const ::bar::MySmallMessage& _internal_vec(int index) const;
  ::bar::MySmallMessage* _internal_add_vec();
  public:
  const ::bar::MySmallMessage& vec(int index) const;
  ::bar::MySmallMessage* add_vec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bar::MySmallMessage >&
      vec() const;

  // map<uint32, string> mp = 4;
  int mp_size() const;
  private:
  int _internal_mp_size() const;
  public:
  void clear_mp();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
      _internal_mp() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
      _internal_mutable_mp();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
      mp() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
      mutable_mp();

  // string str = 2;
  void clear_str();
  const std::string& str() const;
  void set_str(const std::string& value);
  void set_str(std::string&& value);
  void set_str(const char* value);
  void set_str(const char* value, size_t size);
  std::string* mutable_str();
  std::string* release_str();
  void set_allocated_str(std::string* str);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_str();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_str(
      std::string* str);
  private:
  const std::string& _internal_str() const;
  void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // double val = 1;
  void clear_val();
  double val() const;
  void set_val(double value);
  private:
  double _internal_val() const;
  void _internal_set_val(double value);
  public:

  // @@protoc_insertion_point(class_scope:bar.MyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bar::MySmallMessage > vec_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MyMessage_MpEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > mp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
  double val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MySmallMessage

// int64 val = 1;
inline void MySmallMessage::clear_val() {
  val_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MySmallMessage::_internal_val() const {
  return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MySmallMessage::val() const {
  // @@protoc_insertion_point(field_get:bar.MySmallMessage.val)
  return _internal_val();
}
inline void MySmallMessage::_internal_set_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  val_ = value;
}
inline void MySmallMessage::set_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:bar.MySmallMessage.val)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MyMessage

// double val = 1;
inline void MyMessage::clear_val() {
  val_ = 0;
}
inline double MyMessage::_internal_val() const {
  return val_;
}
inline double MyMessage::val() const {
  // @@protoc_insertion_point(field_get:bar.MyMessage.val)
  return _internal_val();
}
inline void MyMessage::_internal_set_val(double value) {
  
  val_ = value;
}
inline void MyMessage::set_val(double value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:bar.MyMessage.val)
}

// string str = 2;
inline void MyMessage::clear_str() {
  str_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MyMessage::str() const {
  // @@protoc_insertion_point(field_get:bar.MyMessage.str)
  return _internal_str();
}
inline void MyMessage::set_str(const std::string& value) {
  _internal_set_str(value);
  // @@protoc_insertion_point(field_set:bar.MyMessage.str)
}
inline std::string* MyMessage::mutable_str() {
  // @@protoc_insertion_point(field_mutable:bar.MyMessage.str)
  return _internal_mutable_str();
}
inline const std::string& MyMessage::_internal_str() const {
  return str_.Get();
}
inline void MyMessage::_internal_set_str(const std::string& value) {
  
  str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MyMessage::set_str(std::string&& value) {
  
  str_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bar.MyMessage.str)
}
inline void MyMessage::set_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bar.MyMessage.str)
}
inline void MyMessage::set_str(const char* value,
    size_t size) {
  
  str_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bar.MyMessage.str)
}
inline std::string* MyMessage::_internal_mutable_str() {
  
  return str_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MyMessage::release_str() {
  // @@protoc_insertion_point(field_release:bar.MyMessage.str)
  return str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MyMessage::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    
  } else {
    
  }
  str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bar.MyMessage.str)
}
inline std::string* MyMessage::unsafe_arena_release_str() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bar.MyMessage.str)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return str_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MyMessage::unsafe_arena_set_allocated_str(
    std::string* str) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (str != nullptr) {
    
  } else {
    
  }
  str_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      str, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bar.MyMessage.str)
}

// repeated .bar.MySmallMessage vec = 3;
inline int MyMessage::_internal_vec_size() const {
  return vec_.size();
}
inline int MyMessage::vec_size() const {
  return _internal_vec_size();
}
inline void MyMessage::clear_vec() {
  vec_.Clear();
}
inline ::bar::MySmallMessage* MyMessage::mutable_vec(int index) {
  // @@protoc_insertion_point(field_mutable:bar.MyMessage.vec)
  return vec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bar::MySmallMessage >*
MyMessage::mutable_vec() {
  // @@protoc_insertion_point(field_mutable_list:bar.MyMessage.vec)
  return &vec_;
}
inline const ::bar::MySmallMessage& MyMessage::_internal_vec(int index) const {
  return vec_.Get(index);
}
inline const ::bar::MySmallMessage& MyMessage::vec(int index) const {
  // @@protoc_insertion_point(field_get:bar.MyMessage.vec)
  return _internal_vec(index);
}
inline ::bar::MySmallMessage* MyMessage::_internal_add_vec() {
  return vec_.Add();
}
inline ::bar::MySmallMessage* MyMessage::add_vec() {
  // @@protoc_insertion_point(field_add:bar.MyMessage.vec)
  return _internal_add_vec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bar::MySmallMessage >&
MyMessage::vec() const {
  // @@protoc_insertion_point(field_list:bar.MyMessage.vec)
  return vec_;
}

// map<uint32, string> mp = 4;
inline int MyMessage::_internal_mp_size() const {
  return mp_.size();
}
inline int MyMessage::mp_size() const {
  return _internal_mp_size();
}
inline void MyMessage::clear_mp() {
  mp_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
MyMessage::_internal_mp() const {
  return mp_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
MyMessage::mp() const {
  // @@protoc_insertion_point(field_map:bar.MyMessage.mp)
  return _internal_mp();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
MyMessage::_internal_mutable_mp() {
  return mp_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
MyMessage::mutable_mp() {
  // @@protoc_insertion_point(field_mutable_map:bar.MyMessage.mp)
  return _internal_mutable_mp();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bar

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bar_2eproto
