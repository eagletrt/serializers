#include "{{filepath}}{{ filename }}.h"

#include <google/protobuf/util/json_util.h>
#include <tuple>

namespace Serializers
{
namespace {{ package.name }}
{
{% for element in file_elements -%}
{% if element.__class__.__name__ == "Message" -%}
{{ element.name }}::{{ element.name }}(const Pb{{ package.name }}::{{ element.name }}& protobuf) {
    {%- for field in element.elements -%}
    {%- if field.__class__.__name__ == "MapField" and utils.is_enum(field.value_type, file_elements) -%}
    {# Map of enum #}
    for(const auto& p : protobuf.{{ field.name.lower() }}()) {
        {{ field.name }}.emplace(p.first, static_cast<{{ field.value_type }}>(p.second));
    }
    {%- elif field.cardinality == "REPEATED" and utils.is_enum(field.type, file_elements) -%}
    {# Vector of enums #}
    for(const auto& e : protobuf.{{ field.name.lower() }}()) {
        {{ field.name }}.push_back(static_cast<{{field.type}}>(e));
    }
    {%- elif field.__class__.__name__ == "MapField" or (field.cardinality == "REPEATED")
    -%}
    {# Map OR vector #}
    {{ field.name }} = {protobuf.{{ field.name.lower() }}().begin(), protobuf.{{ field.name.lower() }}().end()};
    {%- elif utils.is_enum(field.type, file_elements) -%}
    {# Enum field #}
    {{ field.name }} = static_cast<{{ field.type }}>(protobuf.{{ field.name.lower() }}());
    {%- else -%}
    {# Other cases #}
    {{ field.name }} = protobuf.{{ field.name.lower() }}();
    {%- endif -%}
    {% endfor %}
}

{{ element.name }}::operator Pb{{ package.name }}::{{ element.name }}() const {
    Pb{{ package.name }}::{{ element.name }} ret;
    {%- for field in element.elements -%}
    {%- if field.__class__.__name__ == "MapField" and utils.is_enum(field.value_type, file_elements) -%}
    {# Map of enum #}
    for(const auto& p : {{ field.name }}) {
        ret.mutable_{{ field.name.lower() }}()->operator[](p.first) = static_cast<{{ package.name }}::{{ field.value_type }}>(p.second);
    }
    {%- elif field.cardinality == "REPEATED" and utils.is_enum(field.type, file_elements) -%}
    {# Vector of enums #}
    for(const auto& e : {{ field.name }}) {
        ret.mutable_{{ field.name.lower() }}()->Add(static_cast<{{ package.name }}::{{ field.type }}>(e));
    }
    {%- elif (field.__class__.__name__ == "MapField") or (field.cardinality == "REPEATED")
    -%}
    {# Map OR vector #}
    *(ret.mutable_{{ field.name.lower() }}()) = {{ "{" }}{{ field.name }}.begin(), {{ field.name }}.end()};
    {%- elif utils.is_enum(field.type, file_elements) -%}
    {# Enum field #}
    ret.set_{{ field.name.lower() }}(static_cast<{{ package.name }}::{{ field.type }}>({{ field.name }}));
    {%- elif utils.is_message(field.type, file_elements) -%}
    {# Message field #}
    *(ret.mutable_{{ field.name.lower() }}()) = {{ field.name }};
    {%- else -%}
    {# Other cases #}
    ret.set_{{ field.name.lower() }}({{ field.name }});
    {%- endif -%}
    {% endfor %}
    return ret;
}

std::string {{ element.name }}::serializeAsJsonString() const {
    Pb{{ package.name }}::{{ element.name }} protobuf(*this);
    std::string ret;
    google::protobuf::util::JsonPrintOptions options;
    options.add_whitespace = true;
    std::ignore = google::protobuf::util::MessageToJsonString(protobuf, &ret, options);
    return ret;
}

std::string {{ element.name }}::serializeAsProtobufString() const {
    Pb{{ package.name }}::{{ element.name }} protobuf(*this);
    return protobuf.SerializeAsString();
}

bool {{ element.name }}::deserializeFromJsonString(const std::string& str) {
    Pb{{ package.name }}::{{ element.name }} protobuf;
    auto status = google::protobuf::util::JsonStringToMessage(str, &protobuf);
    if(status.ok()) {
        *this = protobuf;
        return true;
    } else {
        return false;
    }
}

bool {{ element.name }}::deserializeFromProtobufString(const std::string& str) {
    Pb{{ package.name }}::{{ element.name }} protobuf;
    if(protobuf.ParseFromString(str)) {
        *this = protobuf;
        return true;
    } else {
        return false;
    }
}
{% if not loop.last %}
{% endif -%}
{% endif -%}
{% endfor -%}
}
}