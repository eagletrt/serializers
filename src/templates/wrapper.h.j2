#ifndef {{ package.name.upper() }}_HPP
#define {{ package.name.upper() }}_HPP

#include "{{ package.name }}.pb.h"

#include <cstdint>
#include <string>
#include <vector>
#include <unordered_map>

namespace serializers
{

{% for _enum in enums -%}
enum class {{ _enum.name }} {
    {% for element in _enum.elements -%}
    {{element.name}} = {{element.number}},
    {% endfor %}
}
{% endfor %}

{% for message in messages -%}
struct {{ message.name }}
{
    {% for element in message.elements -%}
    {{ element.type }} {{ element.name }};
    {% endfor -%}

    {{ message.name }}() = default;
    {{ message.name }}(const bar::{{ message.name }}& proto);

    operator {{ package.name }}::{{ message.name }}() const;

    std::string serializeAsProtobufString() const;
    std::string serializeAsJsonString() const;
    bool deserializeFromProtobufString(const std::string& str);
    bool deserializeFromJsonString(const std::string& str);
};

{% endfor -%}
}

#endif