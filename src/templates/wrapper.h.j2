#ifndef {{ filename.upper() }}_H
#define {{ filename.upper() }}_H

#include "{{ filename }}.pb.h"

#include <cstdint>
#include <string>
#include <vector>
#include <unordered_map>

{% for element in file_elements %}
{%- if element.__class__.__name__ == "Enum" -%}
typedef {{ package.name }}::{{ element.name }} Protobuf{{ element.name }};
{% endif -%}
{% if element.__class__.__name__ == "Message" -%}
typedef {{ package.name }}::{{ element.name }} Protobuf{{ element.name }};
{% endif -%}
{%- endfor %}
namespace Serializers
{
namespace {{ package.name }}
{
{% for element in file_elements %}
{%- if element.__class__.__name__ == "Enum" -%}
enum class {{ element.name }}
{
    {%- for field in element.elements +%}
    {{field.name}} = {{field.number}}
    {%- if not loop.last -%}
    ,
    {%- endif -%}
    {%- endfor %}
};
{% endif -%}
{% if element.__class__.__name__ == "Message" -%}
struct {{ element.name }}
{
    {% for field in element.elements -%}
    {% if field.__class__.__name__ == "MapField" -%}
    std::unordered_map<{{ utils.typeof(field.key_type, package_definitions[package.name]) }}, {{ utils.typeof(field.value_type, package_definitions[package.name]) }}> {{ field.name }};
    {% elif field.cardinality == "REPEATED" -%}
    std::vector<{{ utils.typeof(field.type, package_definitions[package.name]) }}> {{field.name}};
    {% else -%}
    {{ utils.typeof(field.type, package_definitions[package.name]) }} {{ field.name }};
    {% endif -%}
    {%- endfor %}
    {{ element.name }}() = default;
    {{ element.name }}(const Protobuf{{ element.name }}& proto);
    operator Protobuf{{ element.name }}() const;

    std::string serializeAsJsonString() const;
    std::string serializeAsProtobufString() const;
    bool deserializeFromJsonString(const std::string& str);
    bool deserializeFromProtobufString(const std::string& str);
};
{% endif -%}
{% if not loop.last %}
{% endif -%}
{% endfor -%}
}
}

#endif